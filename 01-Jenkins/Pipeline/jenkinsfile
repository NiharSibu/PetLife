node {
 try  {
 notify('Job Started') 
     
  stage('Git-Checkout') {
   git 'https://github.com/NiharSibu/PetLife.git'
  }
    
 def project_path="01-Jenkins/Code/petclinic"
 
 dir(project_path) {
    
  stage('Maven-Clean') {
   sh label: '', script: 'mvn clean'
  }
    
  stage('Maven-Compile') {
   sh label: '', script: 'mvn compile'
  }
  
  stage('Sonar Analysis') {
   withSonarQubeEnv('sonarqube') {
        sh "mvn sonar:sonar"
    }
  }
   stage('Maven-Package') {
   sh label: '', script: 'mvn package'
  }
  
   stage('Jfrog Artifacory'){
    script{
        def server= Artifactory.server 'Artifactory'
            def uploadSpec= """{
                "files": [{
                "pattern": "/root/.jenkins/workspace/Pet-Clinic/petclinic/target/petclinic.war",
                "target": "petclinic"}]
            }"""
        server.upload(uploadSpec)
     }
    }

 stage('Git-Checkout for ansible') {
   git 'https://github.com/NiharSibu/Ansible.git'
  }
  
  stage('Geting Ready For Ansible') {
    def server= Artifactory.server 'Artifactory'
        def downloadSpec = """{
            "files": [{
            "pattern": "petclinic/petclinic.war",
            "target": "ansible/04-Tomcat/templates/apps/" }]
        }"""
    server.download(downloadSpec)  
  sh label: 'Jenkins', script: "echo '<h1> TASK BUILD ID: ${env.BUILD_DISPLAY_NAME}</h1>' > ansible/04-Tomcat/templates/apps/index.html"
 }
 
  stage('Git-Checkout for Teraform') {
   git 'https://github.com/NiharSibu/Terraform.git'
  }

def project_terra="04-Terraform"
dir(project_terra) {
   stage('Prod Deployment on AWS'){
   sh label: 'terraform', script: '/bin/terraform  init'
   sh label: 'terraform', script: '/bin/terraform  apply -input=false -auto-approve'
   }
}

def project_ansible="ansible/04-Tomcat"
dir(project_terra) {
stage('Prod Deployment on AWS'){
sh label: 'terraform', script: 'ansible-playbook -i /../../04-Terraform/jenkins-ci.ini -u ubuntu --key /root/.ssh/*.pem web-playbook.yaml'
     } 
   }
}

notify('Job Completed')   
} catch (err) {
  notify("Error ${err}")
  currentBuild.result = 'FAILURE'
}
}

def notify(status){
    emailext (
	to: "amitvashist7@gmail.com",
	subject: "${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
	 body: """<p>${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
	<p>Check console output at <a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a></p>""",
		)
	}
